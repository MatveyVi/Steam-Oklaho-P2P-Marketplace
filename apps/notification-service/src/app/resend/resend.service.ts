import { Injectable, Logger } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { Resend } from 'resend';
import { SendMailOptions } from '@backend/dto';

@Injectable()
export class ResendMailer {
  private readonly fromEmail: string;
  private readonly resend: Resend;
  private readonly logger = new Logger(ResendMailer.name); // üëà –£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–ª–æ new Logger()

  constructor(private readonly configService: ConfigService) {
    this.resend = new Resend(
      this.configService.getOrThrow<string>('RESEND_API_KEY')
    );
    this.fromEmail = this.configService.getOrThrow<string>('RESEND_EMAIL');
  }

  /**
   * –ü—Ä–∏–≤–∞—Ç–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –≤—Å–µ—Ö –ø–∏—Å–µ–º. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML-–∫–∞—Ä–∫–∞—Å —Å–æ —Å—Ç–∏–ª—è–º–∏.
   */
  private createEmailWrapper(content: string, title: string): string {
    return `
      <!DOCTYPE html>
      <html lang="ru">
      <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>${title}</title>
        <style>
          body {
            margin: 0;
            padding: 0;
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
            background-color: #121212;
            color: #E5E5E5;
          }
          .container {
            width: 90%;
            max-width: 600px;
            margin: 20px auto;
            background-color: #1B2838;
            border-radius: 8px;
            overflow: hidden;
            border: 1px solid #2A3B4C;
          }
          .header {
            padding: 20px 30px;
            text-align: center;
            background-color: #2A3B4C;
          }
          .header h1 {
            margin: 0;
            color: #E5E5E5;
            font-size: 24px;
          }
          .content {
            padding: 30px;
          }
          .content h2 {
            color: #E5E5E5;
            font-size: 20px;
          }
          .content p {
            font-size: 16px;
            line-height: 1.6;
            color: #B0B8BF;
          }
          .card {
            background-color: #2A3B4C;
            border-radius: 5px;
            padding: 20px;
            margin-top: 20px;
          }
          .card p {
            margin: 5px 0;
            color: #E5E5E5;
          }
          .card .label {
            color: #B0B8BF;
          }
          .accent {
            color: #FFD700;
            font-weight: bold;
          }
          .danger {
            color: #FF6B6B;
            font-weight: bold;
          }
          .button {
            display: inline-block;
            padding: 12px 25px;
            margin-top: 20px;
            background-color: #FFD700;
            color: #1B2838;
            text-decoration: none;
            font-weight: bold;
            border-radius: 5px;
          }
          .footer {
            padding: 30px;
            text-align: center;
            font-size: 12px;
            color: #5A6A7C;
          }
        </style>
      </head>
      <body>
        <div class="container">
          <div class="header">
            <h1>CS2 Oklaho Market</h1>
          </div>
          <div class="content">
            ${content}
          </div>
          <div class="footer">
            &copy; ${new Date().getFullYear()} CS2 Oklaho Market. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.
          </div>
        </div>
      </body>
      </html>
    `;
  }

  async sendMail(options: SendMailOptions) {
    this.logger.log(`–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${options.to}`);
    try {
      const { data, error } = await this.resend.emails.send({
        from: this.fromEmail,
        to: options.to,
        subject: options.subject,
        html: options.html,
        text: options.text,
      });

      if (error) {
        throw new Error(error.message);
      }
      this.logger.log(`Email —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! ID: ${data.id}`);
      return data;
    } catch (error: any) {
      this.logger.error(
        `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email: ${error.message}`,
        error.stack
      );
      throw error;
    }
  }

  // --- –Ø—Ä–ª—ã–∫–∏ –£—Å–ø–µ—Ö–∞ ---

  async sendWelcomeEmail(to: string, nickname: string) {
    const subject = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CS2 Oklaho Market!';
    const content = `
      <h2>–ü—Ä–∏–≤–µ—Ç, <span class="accent">${nickname}</span>!</h2>
      <p>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –Ω–∞—à—É P2P –ø–ª–æ—â–∞–¥–∫—É. –ú—ã —Ä–∞–¥—ã, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏.</p>
      <a href="http://localhost:3000/api/users/me" class="button">–ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å</a>
    `;
    const html = this.createEmailWrapper(content, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å');
    return this.sendMail({ to, subject, html });
  }

  async sendBalanceUpdate(
    to: string,
    type: 'deposit' | 'withdraw',
    amount: number,
    newBalance: number
  ) {
    const isDeposit = type === 'deposit';
    const subject = isDeposit
      ? '–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω'
      : '–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω';
    const title = isDeposit ? '–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω' : '–°—Ä–µ–¥—Å—Ç–≤–∞ –≤—ã–≤–µ–¥–µ–Ω—ã';
    const content = `
      <h2>${title}</h2>
      <p>–û–ø–µ—Ä–∞—Ü–∏—è –ø–æ –≤–∞—à–µ–º—É —Å—á–µ—Ç—É –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.</p>
      <div class="card">
        <p><span class="label">–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏:</span> ${
          isDeposit ? '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ' : '–í—ã–≤–æ–¥'
        }</p>
        <p><span class="label">–°—É–º–º–∞:</span> <span class="accent">${amount.toFixed(
          2
        )} $</span></p>
        <hr style="border-color: #5A6A7C; border-top: 0;">
        <p><span class="label">–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:</span> <strong>${newBalance.toFixed(
          2
        )} $</strong></p>
      </div>
    `;
    const html = this.createEmailWrapper(content, title);
    return this.sendMail({ to, subject, html });
  }

  async sendPurchaseConfirmation(
    to: string,
    itemName: string,
    price: number,
    sellerNickname: string,
    imageUrl: string | null
  ) {
    const subject = '–í—ã —Å–æ–≤–µ—Ä—à–∏–ª–∏ –ø–æ–∫—É–ø–∫—É!';

    // –ë–ª–æ–∫ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ imageUrl —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const imageBlock = imageUrl
      ? `
      <div style="text-align: center; padding-bottom: 20px; margin-top: 10px;">
        <img 
          src="${imageUrl}" 
          alt="${itemName}" 
          style="max-width: 100%; width: 250px; height: auto; border-radius: 5px; background: #fff; border: 1px solid #5A6A7C;"
        >
      </div>
      `
      : '';

    const content = `
      <h2>–ü–æ–∫—É–ø–∫–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∞!</h2>
      <p>–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –ø—Ä–µ–¥–º–µ—Ç <span class="accent">${itemName}</span>.</p>
      <div class="card">
        ${imageBlock} 
        <p><span class="label">–ù–∞–∑–≤–∞–Ω–∏–µ:</span> <strong>${itemName}</strong></p>
        <p><span class="label">–ü—Ä–æ–¥–∞–≤–µ—Ü:</span> ${sellerNickname}</p>
        <p><span class="label">–°—É–º–º–∞:</span> <span class="accent">${price.toFixed(
          2
        )} $</span></p>
      </div>
    `;
    const html = this.createEmailWrapper(content, '–î–µ—Ç–∞–ª–∏ –ø–æ–∫—É–ø–∫–∏');
    return this.sendMail({ to, subject, html });
  }

  async sendSaleNotification(
    to: string,
    itemName: string,
    price: number,
    buyerNickname: string,
    imageUrl: string | null
  ) {
    const subject = '–£ –≤–∞—Å –Ω–æ–≤–∞—è –ø—Ä–æ–¥–∞–∂–∞!';

    // –ë–ª–æ–∫ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ imageUrl —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const imageBlock = imageUrl
      ? `
      <div style="text-align: center; padding-bottom: 20px; margin-top: 10px;">
        <img 
          src="${imageUrl}" 
          alt="${itemName}" 
          style="max-width: 100%; width: 250px; height: auto; border-radius: 5px; background: #fff; border: 1px solid #5A6A7C;"
        >
      </div>
      `
      : '';

    const content = `
      <h2>–ü—Ä–µ–¥–º–µ—Ç –ø—Ä–æ–¥–∞–Ω!</h2>
      <p>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à –ø—Ä–µ–¥–º–µ—Ç <span class="accent">${itemName}</span> –±—ã–ª –∫—É–ø–ª–µ–Ω.</p>
      <div class="card">
        ${imageBlock}
        <p><span class="label">–ù–∞–∑–≤–∞–Ω–∏–µ:</span> <strong>${itemName}</strong></p>
        <p><span class="label">–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:</span> ${buyerNickname}</p>
        <p><span class="label">–°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂–∏:</span> <span class="accent">${price.toFixed(
          2
        )} $</span></p>
      </div>
    `;
    const html = this.createEmailWrapper(content, '–î–µ—Ç–∞–ª–∏ –ø—Ä–æ–¥–∞–∂–∏');
    return this.sendMail({ to, subject, html });
  }
  async sendPurchaseFailed(
    to: string,
    itemName: string,
    price: number,
    reason: string
  ) {
    const subject = '–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏';
    const content = `
      <h2>–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–æ–∫—É–ø–∫—É</h2>
      <p>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–∫—É–ø–∫–∏ <span class="accent">${itemName}</span> –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.</p>
      <p class="danger">${reason}</p>
      <div class="card">
        <p><span class="label">–ù–∞–∑–≤–∞–Ω–∏–µ:</span> <strong>${itemName}</strong></p>
        <p><span class="label">–°—É–º–º–∞:</span> <span class="accent">${price.toFixed(
          2
        )} $</span> (–≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ)</p>
      </div>
      <p style="margin-top: 20px;">–°—Ä–µ–¥—Å—Ç–≤–∞ –±—ã–ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å.</p>
    `;
    const html = this.createEmailWrapper(content, '–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏');
    return this.sendMail({ to, subject, html });
  }

  async sendPayoutFailed(
    to: string,
    itemName: string,
    price: number,
    buyerNickname: string
  ) {
    const subject = '–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –û—à–∏–±–∫–∞ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤';
    const content = `
      <h2 class="danger">–û—à–∏–±–∫–∞ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤!</h2>
      <p>–í–∞—à –ø—Ä–µ–¥–º–µ—Ç <span class="accent">${itemName}</span> –±—ã–ª –ø—Ä–æ–¥–∞–Ω, –Ω–æ –ø—Ä–∏ –∑–∞—á–∏—Å–ª–µ–Ω–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.</p>
      <p><strong>–ù–µ –≤–æ–ª–Ω—É–π—Ç–µ—Å—å:</strong> –ø—Ä–æ–¥–∞–∂–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞, –∏ –Ω–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∞. –ú—ã —Ä–µ—à–∏–º —ç—Ç—É –ø—Ä–æ–±–ª–µ–º—É –≤ —Ä—É—á–Ω–æ–º —Ä–µ–∂–∏–º–µ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.</p>
      <div class="card">
        <p><span class="label">–ù–∞–∑–≤–∞–Ω–∏–µ:</span> <strong>${itemName}</strong></p>
        <p><span class="label">–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:</span> ${buyerNickname}</p>
        <p><span class="label">–°—É–º–º–∞ (–æ–∂–∏–¥–∞–µ—Ç):</span> <span class="accent">${price.toFixed(
          2
        )} $</span></p>
      </div>
    `;
    const html = this.createEmailWrapper(content, '–û—à–∏–±–∫–∞ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è');
    return this.sendMail({ to, subject, html });
  }
}
